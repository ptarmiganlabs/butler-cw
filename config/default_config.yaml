# Rename this file to production.yaml, and fill in data as needed below.

# Logging configuration
logLevel: info                    # Log level. Possible log levels are silly, debug, verbose, info, warn, error
fileLogging: false                # true/false to enable/disable logging to disk file

# Configuration of Butler CW's scheduler
scheduler:
  startup: 
    showPerAppSchedule: 
      enable: true          # Should the first itemCount scheduled runs be shown for each app, on startup?
      itemCount: 10         # Number of coming runs to show for each app
  timeZone:                 # Valid values are UTC and LOCAL. Default value is UTC
    scheduleDefine: UTC     # How should times in the apps config file be interpreted? 
    logs: UTC               # What time format should be used in log files?
  showNextEvent:        
    enable: true            # Should date/time of next cache warming event be sent to log file? (true/false) 
    logLevel: verbose       # Log level to use for the next event log entry. Valid values are silly, debug, verbose, info, warn, error
    tzFormat: UTC           # LOCAL or UTC. Default is UTC

# Heartbeats can be used to send "I'm alive" messages to some other tool, e.g. an infrastructure monitoring tool
# The concept is simple: The remoteURL will be called at the specified frequency. The receiving tool will then know 
# that Butler CW is alive.
heartbeat:
  enabled: false
  remoteURL: http://my.monitoring.server/some/path/
  frequency: every 1 hour         # https://breejs.github.io/later/parsers.html#text

# Docker health checks are used when running Butler CW as a Docker container. 
# The Docker engine will call the container's health check REST endpoint with a set interval to determine
# whether the container is alive/well or not.
# If you are not running Butler CW in Docker you can safely disable this feature. 
dockerHealthCheck:
  enabled: false    # Control whether a REST endpoint will be set up to serve Docker health check messages
  port: 12398      # Port the Docker health check service runs on (if enabled)

# Uptime monitor
# When enabled, Butler CW will write info on uptime and used memory to log files
uptimeMonitor:
  enabled: false                   # Should uptime messages be written to the console and log files?
  frequency: every 60 seconds     # https://breejs.github.io/later/parsers.html#text
  logLevel: verbose               # Starting at what log level should uptime messages be shown?

# Paths to client certificates to use when connecting to Sense server. Can be pem or pvk/cer
# remove or comment out if running on desktop
clientCertPath: /path/to/client/cert/client.pem
clientCertKeyPath: /path/to/client/cert/client_key.pem
clientCertCAPath: /path/to/client/cert/root.pem
# If running in a Docker container, the cert paths MUST be the following
# clientCertPath: /nodeapp/config/certificate/client.pem
# clientCertKeyPath: /nodeapp/config/certificate/client_key.pem
# clientCertCAPath: /nodeapp/config/certificate/root.pem

# MQTT config parameters
mqttConfig:
  out: 
    enable: false              # Should info about cache run/warming events be sent as MQTT messages?
    baseTopic: butler-cw/     # Topic to send cache run events to. Should end with /
    tzFormat: UTC             # LOCAL or UTC. Default is UTC
  broker:                     # MQTT server/broker config
    uri: mqtt://<MQTT server ip/FQDN>:<port>      ## Port is usually 1883

# QIX version to use
qixVersion: 12.612.0         # Qlik Associative Engine version to use. Works with Feb 2020 and others

# Config on what apps should be cached
appConfig:
  # Valid options are disk, github
  configSource: disk
  
  # Leave strings empty if disk config not used
  diskConfigFile: ./config/apps.yaml

  # Leave strings empty if github not used
  github:
    host: api.github.com
    username: <username>
    password: pwd or access token
    owner: <repo owner>
    repo: <repo name, e.g. qliksense-cache-warming>
    path: config/apps.yaml

# Is connection to Sense engine secure (https)?
isSecure: true
